import matplotlib.pyplot as plt
from numpy.core.numeric import Inf
import kuhn_poker_dqn as dqn
import kuhn_poker_cfr as cfr
import kuhn_poker_discounted_cfr as dcfr
import kuhn_poker_nfsp as nfsp
import kuhn_poker_rcfr as rfcr
import kuhn_poker_qlearner


def main(unused):
    # DQN
    # print("DQN")
    # expl, conv, num_episodes = dqn.main(unused)
    # plot(expl, range(num_episodes), "dqn_exploitability")
    # plot(conv, range(num_episodes), "dqn_nash_conv")

    # RCFR
    # print("RCFR")
    # expl, conv, num_episodes = rfcr.main(unused)
    # plot(expl, range(num_episodes), "rcfr_exploitability")
    # plot(conv, range(num_episodes), "rcfr_nash_conv")

    # CFR
    print("CFR")
    num_episodes = 100000
    eval_every = 1000
    expl, conv = cfr.train_cfr("kuhn_poker", num_episodes, eval_every)
    plt.semilogy(range(0, num_episodes + 1, eval_every), expl, label="cfr_exploitability")
    # plt.loglog(range(0, num_episodes + 1, eval_every), expl, label="cfr_exploitability")
    plt.savefig("cfr_expl.png")

    # Discounted CFR
    # print("DCFR")
    # num_episodes = 100000
    # eval_every = 1000
    # settings = []
    # settings = [(1, 1, 1), (1.5, 0.5, 2), (1.5, 0, 2), (1.5, -Inf, 2)]
    # for i in range(len(settings)):
        # (alpha, beta, gamma) = settings[i]
        # expl, conv = dcfr.train_discounted_cfr("kuhn_poker", num_episodes, eval_every=eval_every, alpha=alpha, beta=beta, gamma=gamma)
        # plt.semilogy(range(0, num_episodes + 1, eval_every), expl, label="dcfr_exploitability")
        # plt.loglog(range(0, num_episodes + 1, eval_every), expl, label="dcfr_exploitability")
    # plt.legend([str(setting) for setting in settings])
    # plt.savefig("discounted_cfr_expl.png")
    # plot(conv, range(num_episodes), "dcfr_nash_conv")

    # NFSP
    # print("NFSP")
    # num_episodes= 100000
    # eval_every= 1000
    # hidden_layers_sizes = [128]
    # replay_buffer_capacity= int(2e5)
    # reservoir_buffer_capacity= int(2e6)
    # anticipatory_param= 0.1
    # expl, conv = nfsp.train_nfsp("kuhn_poker", num_train_episodes=num_episodes, eval_every=eval_every, hidden_layers_sizes=hidden_layers_sizes, replay_buffer_capacity=replay_buffer_capacity, reservoir_buffer_capacity=reservoir_buffer_capacity, anticipatory_param=anticipatory_param)
    # plot(expl, range(0, num_episodes + 1, eval_every), "nfsp_exploitability")
    # plot(conv, range(num_episodes), "nfsp_nash_conv")

    # Q
    # print("Q")
    # num_episodes = 100000
    # eval_every = 1000
    # alpha = 0.001
    # discount_factor = 0.9
    # temps = [1, 1]
    # expl, conv = kuhn_poker_qlearner.train_Q_learning_agents(num_episodes, eval_every, alpha, discount_factor, temps)
    # plot(expl, range(0, num_episodes + 1, eval_every), "Q_exploitability")
    # plot(conv, range(0, num_episodes + 1, eval_every), "Q_nash_conv")

def plot(metric, num_episodes, name):
    plt.cla()
    plt.plot(num_episodes, metric, label=name)
    plt.savefig(name)


if __name__ == "__main__":
    main(unused="")




