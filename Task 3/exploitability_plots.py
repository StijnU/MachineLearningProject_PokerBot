from nfsp_train import train_nfsp
from open_spiel.python.algorithms import discounted_cfr
from open_spiel.python.algorithms import exploitability
from absl import app

import pyspiel
import matplotlib.pyplot as plt

def main(unused):
    training_episodes = 100000
    eval_every = 10000

    # print("NFSP")
    # expl = train_nfsp("kuhn_poker", num_train_episodes=training_episodes, eval_every=eval_every)
    # plt.plot(list(range(eval_every, training_episodes + eval_every, eval_every)), expl)
    # plt.savefig("exploitabilities_NFSP")

    print("Discounted CFR")
    training_episodes = 1000
    expl = train_discounted_cfr("kuhn_poker", training_episodes)
    plt.plot(range(1, training_episodes + 1), expl)
    plt.savefig("exploitabilities_disc_cfr")
    
def train_discounted_cfr(game, num_iterations):
  game = pyspiel.load_game(game)
  discounted_cfr_solver = discounted_cfr.DCFRSolver(game)

  exploitabilities = []
  for _ in range(num_iterations):
    discounted_cfr_solver.evaluate_and_update_policy()
    conv = exploitability.exploitability(game, discounted_cfr_solver.average_policy())
    exploitabilities.append(conv)
  return exploitabilities

if __name__ == "__main__":
  app.run(main)


